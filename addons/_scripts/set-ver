#!/usr/bin/env node

/**
 * Sets the "version" field in `package.json` for all
 * modules at once.
 * (useful for release candidates)
 */

const fs = require('fs'),
      path = require('path'),
      assert = require('assert');


function setAll(ver, scope='@jscoq', workspaceDir='.') {
    for (let d of fs.readdirSync(workspaceDir)) {
        var fn = path.join(workspaceDir, d, 'package.json');
        if (fs.existsSync(fn)) {
            var inp = fs.readFileSync(fn, 'utf-8');
            var out = inp.replace(/"version": .*/, `"version": "${ver}",`)
                         .replace(/"name": "@[^/]+\// /*"*/, `"name": "${scope}/`);
            var v = JSON.parse(out); // make sure
            console.log(v.name, v.version);
            assert(v.version === ver);
            fs.chmodSync(fn, 0644);  // allow running in Dune build dir
            fs.writeFileSync(fn, out);
        }
    }
}


function parseArgs() {
    var opts = {};
    for (let arg of process.argv.slice(2)) {
        if (arg.startsWith('@')) opts.scope = arg.replace(/\+.*/, ''); // remove e.g. +32bit
        else if (arg.match(/^\d/)) opts.ver = arg;
        else if (!opts.dir) opts.dir = arg;
        else console.warn(`[set-ver] extraneous argument: '${arg}'`);
    }
    return opts;
}

var opts = parseArgs();

if (opts.ver) {
    setAll(opts.ver, opts.scope, opts.dir);
}
else {
    console.log("usage: set-ver [scope] <version-number>");
}
